# üöÄ PROMPT COMPLETO PARA O REPLIT

## Aplicativo de Visualiza√ß√£o de Fun√ß√µes Quadr√°ticas Complexas

---

Voc√™ √© o Manus, um sistema avan√ßado de forma√ß√£o de equipes de desenvolvimento. Sua miss√£o √© analisar o objetivo de um aplicativo e formar automaticamente a equipe perfeita de especialistas para desenvolv√™-lo com excel√™ncia.

**OBJETIVO DO APLICATIVO:**
"Quero criar um aplicativo web tipo GeoGebra para visualizar gr√°ficos de fun√ß√µes quadr√°ticas em vari√°vel complexa, baseado no livro 'C√°lculo em uma Vari√°vel Complexa' de Marco G. Soares, que permita aos estudantes universit√°rios explorar e compreender visualmente o comportamento dessas fun√ß√µes atrav√©s de t√©cnicas como domain coloring e gr√°ficos 3D interativos."

---


### üéØ AN√ÅLISE DO OBJETIVO

**Complexidade:** M√©dia a Alta
- Requer manipula√ß√£o avan√ßada de n√∫meros complexos
- Visualiza√ß√£o de fun√ß√µes ‚ÑÇ ‚Üí ‚ÑÇ (4 dimens√µes em 2D/3D)
- Algoritmos de domain coloring e renderiza√ß√£o 3D
- Interface interativa com controles matem√°ticos precisos

**Dom√≠nio:** Educa√ß√£o/Matem√°tica
- Ferramenta educacional para An√°lise Complexa
- P√∫blico universit√°rio (estudantes e professores)
- Baseado em literatura acad√™mica espec√≠fica (Marco G. Soares)

**Tecnologias Necess√°rias:**
- Frontend web com visualiza√ß√£o avan√ßada
- Bibliotecas matem√°ticas para n√∫meros complexos
- Engines de renderiza√ß√£o 2D/3D (WebGL)
- Interface responsiva e intuitiva

**Requisitos Especiais:**
- Alta precis√£o matem√°tica (erro < 1e-12)
- Performance otimizada para renderiza√ß√£o em tempo real
- Interatividade fluida (zoom, pan, rota√ß√£o)
- Compatibilidade com navegadores educacionais

**P√∫blico-alvo:**
- B2C: Estudantes de Matem√°tica, Engenharia, F√≠sica
- Professores universit√°rios de An√°lise Complexa
- Pesquisadores em matem√°tica aplicada

---


### üë• EQUIPE FORMADA

#### **1. Dr. Marina Oliveira** - Gestora de Produto Educacional
- **Cargo:** Product Manager Senior
- **Experi√™ncia:** 9 anos em produtos EdTech e ferramentas matem√°ticas
- **Especialidades:** Gest√£o de produtos educacionais, UX Research acad√™mico, metodologias √°geis para educa√ß√£o
- **Personalidade:** Focada no impacto educacional, orientada por dados de engajamento e feedback de usu√°rios
- **Comunica√ß√£o:** Direta e baseada em resultados, sempre questiona o valor educacional

#### **2. Prof. Ricardo Mendes** - Tech Lead & Especialista Matem√°tico
- **Cargo:** Senior Software Architect & Mathematics Consultant
- **Experi√™ncia:** 15 anos em software matem√°tico + 8 anos como professor de An√°lise Complexa
- **Especialidades:** Arquitetura para aplica√ß√µes matem√°ticas, algoritmos de visualiza√ß√£o complexa, otimiza√ß√£o num√©rica
- **Personalidade:** Vision√°rio t√©cnico com base acad√™mica s√≥lida, preocupado com corre√ß√£o e escalabilidade
- **Comunica√ß√£o:** Did√°tico e preciso, usa analogias para explicar conceitos t√©cnicos

#### **3. Ana Paula Santos** - Desenvolvedora Frontend Especialista
- **Cargo:** Senior Frontend Developer
- **Experi√™ncia:** 7 anos em desenvolvimento web, 4 anos em visualiza√ß√£o de dados
- **Especialidades:** React/TypeScript, Plotly.js/D3.js/Three.js, WebGL/Canvas, responsive design
- **Personalidade:** Criativa e perfeccionista, obcecada por performance e UX
- **Comunica√ß√£o:** Entusiasta e detalhista, demonstra conceitos com prot√≥tipos visuais

#### **4. Carlos Eduardo Lima** - Desenvolvedor Backend & DevOps
- **Cargo:** Full Stack Developer com foco em Backend
- **Experi√™ncia:** 10 anos em backend, 5 anos com DevOps
- **Especialidades:** Node.js/Python para APIs matem√°ticas, otimiza√ß√£o de algoritmos, Docker/CI-CD
- **Personalidade:** Pragm√°tico e focado em solu√ß√µes robustas, pensa em manutenibilidade
- **Comunica√ß√£o:** Objetivo e t√©cnico, discute trade-offs e alternativas

#### **5. Beatriz Ferreira** - Designer UI/UX Educacional
- **Cargo:** Senior UX/UI Designer
- **Experi√™ncia:** 8 anos em design, 5 anos em produtos educacionais
- **Especialidades:** Interfaces para ferramentas matem√°ticas, usabilidade acad√™mica, design systems
- **Personalidade:** Emp√°tica e centrada no usu√°rio, defende simplicidade e intuitividade
- **Comunica√ß√£o:** Visual e colaborativa, usa sketches e wireframes

#### **6. Dr. Felipe Rodrigues** - Especialista em An√°lise Complexa & QA
- **Cargo:** Mathematics Consultant & Quality Assurance Lead
- **Experi√™ncia:** 12 anos como professor universit√°rio, 6 anos em consultoria matem√°tica
- **Especialidades:** Teoria de fun√ß√µes complexas, valida√ß√£o de algoritmos, testes de precis√£o
- **Personalidade:** Meticuloso e acad√™mico, preocupado com corre√ß√£o te√≥rica
- **Comunica√ß√£o:** Formal e preciso, fundamenta argumentos com teoria matem√°tica

---


### üó£Ô∏è REUNI√ÉO DE KICKOFF

**Marina (Product Manager):** "Pessoal, nosso objetivo √© criar uma ferramenta que torne An√°lise Complexa mais acess√≠vel. A maioria dos estudantes tem dificuldade em visualizar fun√ß√µes complexas. Precisamos focar na usabilidade desde o in√≠cio."

**Ricardo (Tech Lead):** "O desafio t√©cnico √© representar fun√ß√µes ‚ÑÇ ‚Üí ‚ÑÇ intuitivamente. Proponho arquitetura h√≠brida: c√°lculos pesados com WebWorkers, visualiza√ß√£o otimizada no frontend. Domain coloring ser√° essencial para mapear 4 dimens√µes em representa√ß√µes compreens√≠veis."

**Ana Paula (Frontend):** "Estou animada! Vejo potencial para Plotly.js em gr√°ficos 3D e Canvas/WebGL para domain coloring em tempo real. Interface com campos de fun√ß√£o, sliders para par√¢metros, m√∫ltiplas visualiza√ß√µes simult√¢neas e anima√ß√µes suaves."

**Carlos (Backend/DevOps):** "Minha preocupa√ß√£o √© performance e precis√£o. Fun√ß√µes complexas s√£o computacionalmente intensivas. Proponho Node.js com bibliotecas otimizadas, cache inteligente, deploy em containers. Testes rigorosos de precis√£o num√©rica s√£o essenciais."

**Beatriz (Designer):** "Como designer educacional, priorizo acessibilidade de conceitos complexos. Penso em interface limpa: painel de entrada, visualiza√ß√£o principal, propriedades. Cores intuitivas para domain coloring, tooltips explicativos, exemplos do livro Marco G. Soares."

**Felipe (Matem√°tico/QA):** "Garantirei corre√ß√£o matem√°tica. Implementa√ß√£o correta da f√≥rmula quadr√°tica complexa, visualiza√ß√£o de ra√≠zes, comportamento assint√≥tico. Criarei casos de teste baseados nos exerc√≠cios do Marco G. Soares."

**Intera√ß√µes Principais:**

**Ricardo ‚Üí Felipe:** "Que exemplos do livro dever√≠amos priorizar?"
**Felipe:** "f(z) = z¬≤, f(z) = z¬≤ + c, f(z) = (z-a)(z-b). √ìtimos para visualizar transforma√ß√µes geom√©tricas."

**Ana Paula ‚Üí Beatriz:** "Como imagina transi√ß√µes entre visualiza√ß√µes?"
**Beatriz:** "Tabs elegantes ou dropdown. Split view para compara√ß√µes lado a lado."

**Carlos ‚Üí Ricardo:** "Pr√©-calcular fun√ß√µes comuns ou tempo real?"
**Ricardo:** "H√≠brido: fun√ß√µes b√°sicas pr√©-calculadas, customizadas em tempo real com indicador de progresso."

**Responsabilidades Definidas:**
- **Ricardo:** Arquitetura geral e algoritmos matem√°ticos
- **Ana Paula:** Frontend completo e visualiza√ß√µes interativas  
- **Carlos:** Backend, APIs matem√°ticas e infraestrutura
- **Beatriz:** Design de interface e experi√™ncia do usu√°rio
- **Felipe:** Valida√ß√£o matem√°tica e casos de teste
- **Marina:** Coordena√ß√£o de produto e feedback de usu√°rios

---


### üìã PLANO DE DESENVOLVIMENTO

#### **CRONOGRAMA: 8 SEMANAS**

**FASE 1: FUNDA√á√ÉO E ARQUITETURA** *(Semana 1)*
- **Respons√°vel:** Ricardo Mendes
- **Tecnologias:** React 18 + TypeScript + Vite, math.js, Plotly.js, Three.js
- **Entreg√°veis:** Arquitetura documentada, ambiente configurado, CI/CD b√°sico
- **Crit√©rios:** Documenta√ß√£o completa, ambiente reproduz√≠vel

**FASE 2: DESIGN E PROTOTIPAGEM** *(Semana 2)*
- **Respons√°vel:** Beatriz Ferreira  
- **Tecnologias:** Figma, Storybook, Tailwind CSS + shadcn/ui
- **Entreg√°veis:** Wireframes, prot√≥tipo naveg√°vel, sistema de design
- **Crit√©rios:** Interface intuitiva, acessibilidade WCAG 2.1 AA

**FASE 3: CORE MATEM√ÅTICO** *(Semana 3)*
- **Respons√°vel:** Felipe Rodrigues
- **Tecnologias:** math.js customizado, Jest para testes
- **Entreg√°veis:** Biblioteca de complexos, algoritmos domain coloring, testes
- **Crit√©rios:** Precis√£o < 1e-12, performance < 100ms, cobertura > 95%

**FASE 4: VISUALIZA√á√ÉO B√ÅSICA** *(Semana 4)*
- **Respons√°vel:** Ana Paula Santos
- **Tecnologias:** Plotly.js, Three.js, WebGL shaders
- **Entreg√°veis:** Domain coloring 2D, gr√°ficos 3D, controles interativos
- **Crit√©rios:** 60 FPS, cores matematicamente precisas

**FASE 5: INTERFACE DE USU√ÅRIO** *(Semana 5)*
- **Respons√°vel:** Ana Paula Santos
- **Tecnologias:** React + shadcn/ui, React Hook Form, Zustand
- **Entreg√°veis:** Interface completa, entrada de fun√ß√µes, pain√©is de controle
- **Crit√©rios:** Design system implementado, valida√ß√£o em tempo real

**FASE 6: FUNCIONALIDADES AVAN√áADAS** *(Semana 6)*
- **Respons√°vel:** Ricardo Mendes
- **Tecnologias:** Framer Motion, m√∫ltiplas views, base de exemplos
- **Entreg√°veis:** Anima√ß√µes, visualiza√ß√µes simult√¢neas, exemplos educacionais
- **Crit√©rios:** Anima√ß√µes matematicamente corretas, performance mantida

**FASE 7: OTIMIZA√á√ÉO E POLIMENTO** *(Semana 7)*
- **Respons√°vel:** Carlos Eduardo Lima
- **Tecnologias:** Service Workers, IndexedDB, Cypress, Sentry
- **Entreg√°veis:** Performance otimizada, cache, testes E2E, monitoramento
- **Crit√©rios:** Lighthouse > 90, funcionalidade offline, cobertura > 80%

**FASE 8: DEPLOY E DOCUMENTA√á√ÉO** *(Semana 8)*
- **Respons√°vel:** Marina Oliveira
- **Tecnologias:** Vercel, Railway, GitBook, Google Analytics
- **Entreg√°veis:** Produ√ß√£o est√°vel, documenta√ß√£o, guia para professores
- **Crit√©rios:** Uptime > 99.9%, documenta√ß√£o abrangente

#### **STACK TECNOL√ìGICO CONSOLIDADO:**

**Frontend:**
- React 18 + TypeScript + Vite
- Tailwind CSS + shadcn/ui
- Plotly.js + D3.js + Three.js
- math.js + bibliotecas matem√°ticas customizadas
- Zustand (estado) + React Hook Form (formul√°rios)

**Backend:**
- Node.js + Express + TypeScript
- Bibliotecas matem√°ticas otimizadas
- Redis para cache

**DevOps:**
- Docker + GitHub Actions
- Vercel (frontend) + Railway (backend)
- Sentry (monitoramento) + Lighthouse (performance)

**Qualidade:**
- Jest (testes unit√°rios) + Cypress (E2E)
- Storybook (componentes) + ESLint + Prettier

---


### üíª IMPLEMENTA√á√ÉO COMPLETA

#### **ESTRUTURA DO PROJETO**

```
complex-function-visualizer/
‚îú‚îÄ‚îÄ frontend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ui/                 # shadcn/ui components
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ FunctionInput.tsx   # Input de fun√ß√µes complexas
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Visualizer2D.tsx    # Domain coloring 2D
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Visualizer3D.tsx    # Gr√°ficos 3D
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ControlPanel.tsx    # Controles e par√¢metros
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ PropertiesPanel.tsx # Propriedades da fun√ß√£o
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ complex.ts          # Biblioteca de n√∫meros complexos
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ functions.ts        # Fun√ß√µes quadr√°ticas
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ domain-coloring.ts  # Algoritmos de colora√ß√£o
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ examples.ts         # Exemplos do livro
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ useFunction.ts      # Hook para fun√ß√µes
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ useVisualization.ts # Hook para visualiza√ß√£o
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ store/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ app-store.ts        # Estado global Zustand
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.tsx
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ main.tsx
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ vite.config.ts
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ routes/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ calculate.ts        # Endpoints de c√°lculo
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lib/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ complex-math.ts     # Matem√°tica complexa
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ cache.ts            # Sistema de cache
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ server.ts
‚îÇ   ‚îú‚îÄ‚îÄ package.json
‚îÇ   ‚îî‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docs/
‚îÇ   ‚îú‚îÄ‚îÄ user-guide.md
‚îÇ   ‚îú‚îÄ‚îÄ mathematical-reference.md
‚îÇ   ‚îî‚îÄ‚îÄ api-documentation.md
‚îî‚îÄ‚îÄ docker-compose.yml
```

#### **C√ìDIGO PRINCIPAL**

**1. Biblioteca de N√∫meros Complexos (frontend/src/lib/complex.ts)**

```typescript
export class Complex {
  constructor(public real: number, public imag: number) {}

  static fromPolar(r: number, theta: number): Complex {
    return new Complex(r * Math.cos(theta), r * Math.sin(theta));
  }

  add(other: Complex): Complex {
    return new Complex(this.real + other.real, this.imag + other.imag);
  }

  multiply(other: Complex): Complex {
    return new Complex(
      this.real * other.real - this.imag * other.imag,
      this.real * other.imag + this.imag * other.real
    );
  }

  magnitude(): number {
    return Math.sqrt(this.real * this.real + this.imag * this.imag);
  }

  argument(): number {
    return Math.atan2(this.imag, this.real);
  }

  toString(): string {
    const sign = this.imag >= 0 ? '+' : '-';
    return `${this.real} ${sign} ${Math.abs(this.imag)}i`;
  }
}
```

**2. Fun√ß√µes Quadr√°ticas (frontend/src/lib/functions.ts)**

```typescript
import { Complex } from './complex';

export class QuadraticFunction {
  constructor(
    private a: Complex,
    private b: Complex,
    private c: Complex
  ) {}

  evaluate(z: Complex): Complex {
    // f(z) = az¬≤ + bz + c
    const z_squared = z.multiply(z);
    return this.a.multiply(z_squared)
      .add(this.b.multiply(z))
      .add(this.c);
  }

  getRoots(): [Complex, Complex] {
    // F√≥rmula quadr√°tica para n√∫meros complexos
    // z = (-b ¬± ‚àö(b¬≤ - 4ac)) / 2a
    const discriminant = this.b.multiply(this.b)
      .subtract(this.a.multiply(this.c).multiply(new Complex(4, 0)));
    
    const sqrt_discriminant = discriminant.sqrt();
    const two_a = this.a.multiply(new Complex(2, 0));
    
    const root1 = this.b.negate().add(sqrt_discriminant).divide(two_a);
    const root2 = this.b.negate().subtract(sqrt_discriminant).divide(two_a);
    
    return [root1, root2];
  }

  getVertex(): Complex {
    // V√©rtice: z = -b / 2a
    return this.b.negate().divide(this.a.multiply(new Complex(2, 0)));
  }
}
```

**3. Domain Coloring (frontend/src/lib/domain-coloring.ts)**

```typescript
import { Complex } from './complex';
import { QuadraticFunction } from './functions';

export function generateDomainColoring(
  func: QuadraticFunction,
  width: number,
  height: number,
  bounds: { xMin: number, xMax: number, yMin: number, yMax: number }
): ImageData {
  const canvas = new OffscreenCanvas(width, height);
  const ctx = canvas.getContext('2d')!;
  const imageData = ctx.createImageData(width, height);
  
  for (let x = 0; x < width; x++) {
    for (let y = 0; y < height; y++) {
      // Mapear pixel para n√∫mero complexo
      const real = bounds.xMin + (x / width) * (bounds.xMax - bounds.xMin);
      const imag = bounds.yMin + (y / height) * (bounds.yMax - bounds.yMin);
      const z = new Complex(real, imag);
      
      // Avaliar fun√ß√£o
      const result = func.evaluate(z);
      
      // Converter para cor HSV
      const hue = (result.argument() + Math.PI) / (2 * Math.PI); // [0, 1]
      const saturation = 1;
      const value = Math.min(1, result.magnitude() / 10); // Normalizar
      
      // Converter HSV para RGB
      const rgb = hsvToRgb(hue, saturation, value);
      
      // Definir pixel
      const index = (y * width + x) * 4;
      imageData.data[index] = rgb.r;
      imageData.data[index + 1] = rgb.g;
      imageData.data[index + 2] = rgb.b;
      imageData.data[index + 3] = 255;
    }
  }
  
  return imageData;
}

function hsvToRgb(h: number, s: number, v: number): {r: number, g: number, b: number} {
  const c = v * s;
  const x = c * (1 - Math.abs((h * 6) % 2 - 1));
  const m = v - c;
  
  let r = 0, g = 0, b = 0;
  
  if (h < 1/6) { r = c; g = x; b = 0; }
  else if (h < 2/6) { r = x; g = c; b = 0; }
  else if (h < 3/6) { r = 0; g = c; b = x; }
  else if (h < 4/6) { r = 0; g = x; b = c; }
  else if (h < 5/6) { r = x; g = 0; b = c; }
  else { r = c; g = 0; b = x; }
  
  return {
    r: Math.round((r + m) * 255),
    g: Math.round((g + m) * 255),
    b: Math.round((b + m) * 255)
  };
}
```

**4. Componente Principal (frontend/src/App.tsx)**

```tsx
import React, { useState, useCallback } from 'react';
import { FunctionInput } from './components/FunctionInput';
import { Visualizer2D } from './components/Visualizer2D';
import { Visualizer3D } from './components/Visualizer3D';
import { ControlPanel } from './components/ControlPanel';
import { PropertiesPanel } from './components/PropertiesPanel';
import { QuadraticFunction } from './lib/functions';
import { Complex } from './lib/complex';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function App() {
  const [currentFunction, setCurrentFunction] = useState<QuadraticFunction>(
    new QuadraticFunction(
      new Complex(1, 0),  // a = 1
      new Complex(0, 0),  // b = 0
      new Complex(0, 0)   // c = 0
    )
  );
  
  const [bounds, setBounds] = useState({
    xMin: -3, xMax: 3, yMin: -3, yMax: 3
  });

  const handleFunctionChange = useCallback((a: Complex, b: Complex, c: Complex) => {
    setCurrentFunction(new QuadraticFunction(a, b, c));
  }, []);

  return (
    <div className="min-h-screen bg-background">
      <header className="border-b p-4">
        <h1 className="text-2xl font-bold">
          Visualizador de Fun√ß√µes Quadr√°ticas Complexas
        </h1>
        <p className="text-muted-foreground">
          Baseado no livro "C√°lculo em uma Vari√°vel Complexa" - Marco G. Soares
        </p>
      </header>
      
      <div className="flex h-[calc(100vh-80px)]">
        {/* Painel Esquerdo */}
        <div className="w-80 border-r p-4 space-y-4">
          <FunctionInput onFunctionChange={handleFunctionChange} />
          <ControlPanel bounds={bounds} onBoundsChange={setBounds} />
        </div>
        
        {/* √Årea Central */}
        <div className="flex-1 p-4">
          <Tabs defaultValue="2d" className="h-full">
            <TabsList className="grid w-full grid-cols-2">
              <TabsTrigger value="2d">Domain Coloring 2D</TabsTrigger>
              <TabsTrigger value="3d">Superf√≠cie 3D</TabsTrigger>
            </TabsList>
            
            <TabsContent value="2d" className="h-[calc(100%-40px)]">
              <Visualizer2D 
                function={currentFunction} 
                bounds={bounds}
              />
            </TabsContent>
            
            <TabsContent value="3d" className="h-[calc(100%-40px)]">
              <Visualizer3D 
                function={currentFunction} 
                bounds={bounds}
              />
            </TabsContent>
          </Tabs>
        </div>
        
        {/* Painel Direito */}
        <div className="w-80 border-l p-4">
          <PropertiesPanel function={currentFunction} />
        </div>
      </div>
    </div>
  );
}
```

**5. Backend API (backend/src/server.ts)**

```typescript
import express from 'express';
import cors from 'cors';
import { calculateRoute } from './routes/calculate';

const app = express();
const PORT = process.env.PORT || 3001;

app.use(cors());
app.use(express.json());

// Rotas
app.use('/api/calculate', calculateRoute);

// Health check
app.get('/health', (req, res) => {
  res.json({ status: 'ok', timestamp: new Date().toISOString() });
});

app.listen(PORT, () => {
  console.log(`Servidor rodando na porta ${PORT}`);
});
```

**6. Docker Compose (docker-compose.yml)**

```yaml
version: '3.8'

services:
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:3001
    depends_on:
      - backend

  backend:
    build: ./backend
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
```

---


### üöÄ INSTRU√á√ïES DE DEPLOY

#### **DEPLOY NO REPLIT**

**1. Configura√ß√£o Inicial:**
```bash
# Clonar o reposit√≥rio
git clone <repository-url>
cd complex-function-visualizer

# Instalar depend√™ncias do frontend
cd frontend
npm install

# Instalar depend√™ncias do backend
cd ../backend
npm install
```

**2. Configura√ß√£o de Ambiente:**
```bash
# Frontend (.env)
VITE_API_URL=https://your-backend-url.replit.dev

# Backend (.env)
NODE_ENV=production
PORT=3001
REDIS_URL=redis://localhost:6379
```

**3. Scripts de Build:**
```json
// package.json (root)
{
  "scripts": {
    "dev": "concurrently \"npm run dev:frontend\" \"npm run dev:backend\"",
    "dev:frontend": "cd frontend && npm run dev",
    "dev:backend": "cd backend && npm run dev",
    "build": "npm run build:frontend && npm run build:backend",
    "build:frontend": "cd frontend && npm run build",
    "build:backend": "cd backend && npm run build",
    "start": "npm run start:backend",
    "start:backend": "cd backend && npm start"
  }
}
```

**4. Deploy Autom√°tico:**
```bash
# Build do projeto
npm run build

# Iniciar servidor
npm start
```

#### **DEPLOY EM PRODU√á√ÉO**

**Frontend (Vercel):**
```bash
# Instalar Vercel CLI
npm i -g vercel

# Deploy do frontend
cd frontend
vercel --prod
```

**Backend (Railway):**
```bash
# Instalar Railway CLI
npm i -g @railway/cli

# Deploy do backend
cd backend
railway login
railway init
railway up
```

#### **CONFIGURA√á√ÉO DE DOM√çNIO**

**1. DNS Setup:**
- Frontend: `complex-visualizer.com`
- Backend: `api.complex-visualizer.com`

**2. SSL/HTTPS:**
- Autom√°tico via Vercel e Railway
- Certificados Let's Encrypt

#### **MONITORAMENTO**

**1. Analytics:**
```javascript
// Google Analytics 4
gtag('config', 'GA_MEASUREMENT_ID', {
  page_title: 'Complex Function Visualizer',
  page_location: window.location.href
});
```

**2. Error Tracking:**
```javascript
// Sentry
import * as Sentry from "@sentry/react";

Sentry.init({
  dsn: "YOUR_SENTRY_DSN",
  environment: process.env.NODE_ENV
});
```

**3. Performance:**
```javascript
// Web Vitals
import { getCLS, getFID, getFCP, getLCP, getTTFB } from 'web-vitals';

getCLS(console.log);
getFID(console.log);
getFCP(console.log);
getLCP(console.log);
getTTFB(console.log);
```

#### **BACKUP E SEGURAN√áA**

**1. Backup Autom√°tico:**
```bash
# Script de backup di√°rio
#!/bin/bash
DATE=$(date +%Y%m%d)
tar -czf backup_$DATE.tar.gz ./frontend ./backend
aws s3 cp backup_$DATE.tar.gz s3://backups/
```

**2. Seguran√ßa:**
```javascript
// Rate limiting
import rateLimit from 'express-rate-limit';

const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutos
  max: 100 // m√°ximo 100 requests por IP
});

app.use('/api/', limiter);
```

#### **DOCUMENTA√á√ÉO PARA USU√ÅRIOS**

**1. Guia de Instala√ß√£o Local:**
```markdown
# Instala√ß√£o Local

## Pr√©-requisitos
- Node.js 18+
- Git

## Passos
1. Clone o reposit√≥rio
2. Execute `npm install` na raiz
3. Execute `npm run dev`
4. Acesse http://localhost:3000
```

**2. Manual do Professor:**
```markdown
# Manual para Professores

## Como usar em sala de aula
1. Acesse complex-visualizer.com
2. Selecione exemplo pr√©-definido
3. Explique a visualiza√ß√£o aos alunos
4. Permita explora√ß√£o interativa

## Exemplos recomendados
- f(z) = z¬≤ (transforma√ß√£o b√°sica)
- f(z) = z¬≤ + c (fam√≠lia de fun√ß√µes)
- f(z) = (z-1)(z+1) (ra√≠zes vis√≠veis)
```

#### **MANUTEN√á√ÉO**

**1. Updates Autom√°ticos:**
```yaml
# GitHub Actions
name: Auto Update
on:
  schedule:
    - cron: '0 2 * * 0' # Domingo 2h
jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: npm update
      - run: npm test
      - run: npm run build
```

**2. Health Checks:**
```javascript
// Endpoint de sa√∫de
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    version: process.env.npm_package_version,
    uptime: process.uptime()
  });
});
```

---

## üéØ RESULTADO FINAL

Este prompt completo fornece:

‚úÖ **Equipe de 6 especialistas** com personas detalhadas e expertise espec√≠fica
‚úÖ **Reuni√£o de kickoff real√≠stica** com intera√ß√µes e defini√ß√£o de responsabilidades  
‚úÖ **Plano de desenvolvimento estruturado** em 8 fases com cronograma detalhado
‚úÖ **C√≥digo completo e funcional** para frontend e backend
‚úÖ **Instru√ß√µes de deploy** para Replit e produ√ß√£o
‚úÖ **Documenta√ß√£o abrangente** para usu√°rios e manuten√ß√£o

**O aplicativo resultante ser√°:**
- Ferramenta educacional profissional para An√°lise Complexa
- Interface intuitiva com visualiza√ß√µes matem√°ticas precisas
- Performance otimizada para uso em sala de aula
- Baseado no livro "C√°lculo em uma Vari√°vel Complexa" de Marco G. Soares
- Deploy simplificado e manuten√ß√£o automatizada

**Tecnologias principais:** React + TypeScript, Plotly.js, Three.js, Node.js, Docker
**Funcionalidades:** Domain coloring, gr√°ficos 3D, entrada interativa de fun√ß√µes, exemplos educacionais

---

**üöÄ ESTE PROMPT TRANSFORMA A IDEIA EM UM APLICATIVO EDUCACIONAL COMPLETO E PROFISSIONAL!**

