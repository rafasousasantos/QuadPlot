ache uma solucao
esta errando muito
va por outro metodo
# DOCKERFILE PRODUÇÃO - SIGE v8.0
# Sistema Integrado de Gestão Empresarial
# Otimizado para Hostinger EasyPanel

FROM python:3.11-slim-bullseye

# Metadados
LABEL maintainer="SIGE v8.0" \
      version="8.0" \
      description="Sistema Integrado de Gestão Empresarial"

# Variáveis de build
ARG DEBIAN_FRONTEND=noninteractive

# Instalar dependências do sistema (seguindo o guia)
RUN apt-get update && apt-get install -y --no-install-recommends \
    postgresql-client \
    curl \
    wget \
    gcc \
    python3-dev \
    libpq-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Criar usuário não-root para segurança
RUN groupadd -r sige && useradd -r -g sige sige

# Definir diretório de trabalho
WORKDIR /app

# Copiar arquivos de dependências primeiro (otimização de cache)
COPY pyproject.toml ./

# Gerar requirements.txt e instalar dependências
RUN pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir .

# Copiar código da aplicação
COPY . .

# Criar diretórios necessários
RUN mkdir -p /app/static/fotos /app/logs && \
    chown -R sige:sige /app

# Copiar script de entrada para EasyPanel
COPY docker-entrypoint-easypanel-final.sh /app/docker-entrypoint.sh
RUN chmod +x /app/docker-entrypoint.sh

# Mudar para usuário não-root
USER sige

# Variáveis de ambiente (não-sensíveis)
ENV FLASK_ENV=production \
    PORT=5000 \
    PYTHONPATH=/app \
    PYTHONUNBUFFERED=1 \
    DATABASE_URL=postgresql://sige:sige@viajey_sige:5432/sige?sslmode=disable

# Expor porta
EXPOSE 5000

# Healthcheck para EasyPanel
HEALTHCHECK --interval=30s --timeout=5s --start-period=30s --retries=3 \
  CMD curl -f http://localhost:${PORT:-5000}/health || exit 1

# Comando de entrada (padrão do guia)
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "1", "--timeout", "120", "--access-logfile", "-", "main:app"]


# DOCKER COMPOSE - SIGE v8.0
# Para testes locais e desenvolvimento com PostgreSQL

version: '3.8'

services:
  # Banco de dados PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: sige_postgres
    environment:
      POSTGRES_DB: sige
      POSTGRES_USER: sige  
      POSTGRES_PASSWORD: sige
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./otimizacoes_producao.sql:/docker-entrypoint-initdb.d/01-otimizacoes.sql
    networks:
      - sige_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sige -d sige"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Aplicação SIGE
  sige:
    build: .
    container_name: sige_app
    environment:
      DATABASE_URL: postgresql://sige:sige@postgres:5432/sige?sslmode=disable
      SECRET_KEY: sige-v8-local-secret-key-for-testing
      SESSION_SECRET: sige-v8-local-session-secret-for-testing
      FLASK_ENV: production
      PORT: 5000
    ports:
      - "5000:5000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sige_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/monitoring/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    volumes:
      - ./static/fotos:/app/static/fotos
      - ./logs:/app/logs

networks:
  sige_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

    