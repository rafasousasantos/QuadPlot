# Dockerfile para EasyPanel - M√©todo CommonJS Ultra-Simples
FROM node:20-alpine AS base

# Instalar depend√™ncias do sistema
RUN apk add --no-cache libc6-compat curl bash

# Etapa de instala√ß√£o de depend√™ncias
FROM base AS deps
WORKDIR /app

# Copiar arquivos de depend√™ncias
COPY package.json package-lock.json* ./

# Instalar TODAS as depend√™ncias (incluindo devDependencies para o build)
RUN npm ci

# Etapa de build
FROM base AS builder
WORKDIR /app

# Copiar depend√™ncias da etapa anterior
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Definir vari√°veis de ambiente para o build
ENV NODE_ENV=production
ENV REPL_ID=""

# Build apenas o frontend com config de produ√ß√£o
RUN npx vite build --config vite.config.production.ts

# Criar servidor CommonJS sem ESM
RUN cat > dist/server-commonjs.js << 'EOF'
const express = require('express');
const path = require('path');
const fs = require('fs');

const app = express();

// Middleware b√°sico
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

// Logging middleware
app.use((req, res, next) => {
  const start = Date.now();
  const requestPath = req.path;
  
  res.on("finish", () => {
    const duration = Date.now() - start;
    if (requestPath.startsWith("/api")) {
      const formattedTime = new Date().toLocaleTimeString("en-US", {
        hour: "numeric",
        minute: "2-digit", 
        second: "2-digit",
        hour12: true,
      });
      console.log(`${formattedTime} [express] ${req.method} ${requestPath} ${res.statusCode} in ${duration}ms`);
    }
  });
  
  next();
});

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.status(200).json({ 
    status: 'healthy', 
    timestamp: new Date().toISOString(),
    service: 'Complex Function Visualizer'
  });
});

// Servir arquivos est√°ticos do frontend
const publicPath = path.join(__dirname, 'public');

if (!fs.existsSync(publicPath)) {
  console.error(`‚ùå Diret√≥rio p√∫blico n√£o encontrado: ${publicPath}`);
  console.error('Execute o build primeiro: npm run build');
  process.exit(1);
}

// Middleware para arquivos est√°ticos
app.use(express.static(publicPath));

// Fallback para SPA - todas as rotas retornam index.html
app.get('*', (req, res) => {
  const indexPath = path.join(publicPath, 'index.html');
  
  if (fs.existsSync(indexPath)) {
    res.sendFile(indexPath);
  } else {
    res.status(404).send('Frontend build n√£o encontrado');
  }
});

// Error handler
app.use((err, req, res, next) => {
  const status = err.status || err.statusCode || 500;
  const message = err.message || "Internal Server Error";
  
  console.error(`‚ùå Erro: ${message}`);
  res.status(status).json({ message });
});

// Iniciar servidor
const port = parseInt(process.env.PORT || '5013', 10);

app.listen(port, '0.0.0.0', () => {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit", 
    hour12: true,
  });
  
  console.log(`${formattedTime} [express] üöÄ Complex Function Visualizer`);
  console.log(`${formattedTime} [express] üì° Serving on port ${port}`);
  console.log(`${formattedTime} [express] üåê Frontend: http://localhost:${port}`);
  console.log(`${formattedTime} [express] ‚ù§Ô∏è  Health: http://localhost:${port}/api/health`);
});
EOF

# Etapa de produ√ß√£o
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=5013

# Criar usu√°rio n√£o-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copiar apenas os arquivos necess√°rios para produ√ß√£o
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package.json ./package.json

# Instalar apenas depend√™ncias de produ√ß√£o 
RUN npm ci --only=production && npm cache clean --force

# Definir permiss√µes
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 5013

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:5013/api/health || exit 1

CMD ["node", "dist/server-commonjs.js"]