# Dockerfile otimizado para EasyPanel - Solução 1 do Guia
FROM node:20-alpine AS base

# Instalar dependências do sistema
RUN apk add --no-cache libc6-compat curl

# Etapa de instalação de dependências
FROM base AS deps
WORKDIR /app

# Copiar arquivos de dependências
COPY package.json package-lock.json* ./

# Instalar TODAS as dependências (incluindo devDependencies para o build)
RUN npm ci

# Etapa de build
FROM base AS builder
WORKDIR /app

# Copiar dependências da etapa anterior
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Definir variáveis de ambiente para o build
ENV NODE_ENV=production
ENV REPL_ID=""

# Fazer o build da aplicação
RUN npm run build:frontend

# Preparar servidor de produção
RUN cp server-production.js dist/server.js

# Etapa de produção
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV PORT=5013

# Criar usuário não-root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copiar apenas os arquivos necessários para produção
COPY --from=builder /app/dist ./dist
COPY --from=builder /app/package.json ./package.json

# Instalar apenas dependências de produção
RUN npm ci --only=production && npm cache clean --force

# Definir permissões
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 5013

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:5013/api/health || exit 1

CMD ["node", "dist/server.js"]